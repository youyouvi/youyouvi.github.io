<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>M&#39;Note</title>
  
  <subtitle>一切有为法,如梦幻泡影。如露亦如电,应作如是观。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://youyouvi.github.io/"/>
  <updated>2017-09-24T07:04:15.670Z</updated>
  <id>https://youyouvi.github.io/</id>
  
  <author>
    <name>子语</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础知识(二)</title>
    <link href="https://youyouvi.github.io/2017/09/24/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(%E4%BA%8C)/"/>
    <id>https://youyouvi.github.io/2017/09/24/Java基础知识(二)/</id>
    <published>2017-09-24T03:29:54.604Z</published>
    <updated>2017-09-24T07:04:15.670Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> 运算符</h2><blockquote><p>常用运算符：四则运算符、逻辑运算符、三目运算符和位运算符。</p></blockquote><h3 id="基本运算符"><a class="markdownIt-Anchor" href="#基本运算符"></a> 基本运算符</h3><ol><li><code>=</code>为赋值运算符。</li><li>四则运算符基本组成：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>。<strong>不要使用运算符编写过于复杂的计算。</strong></li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">int</span> numA = <span class="number">10</span>;</div><div class="line">        <span class="keyword">double</span> numB = <span class="number">20</span>;</div><div class="line">        <span class="keyword">int</span> numC = <span class="number">3</span>;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"加法计算："</span> + (numA + numB));</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"减法计算："</span> + (numA - numB));</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"乘法计算："</span> + (numA * numB));</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"除法计算："</span> + (numA / numB));</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"求模计算："</span> + (numA % numC));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol start="3"><li>简化运算符：<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>:</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">int</span> numA = <span class="number">10</span>;</div><div class="line">        numA += <span class="number">2</span>; <span class="comment">// 等同于 numA = numA + 2</span></div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"加法计算"</span> + (numA)); <span class="comment">// 12</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol start="4"><li><code>++</code>（自增），<code>--</code>（自减）：位置不同，功能也不同：<br>·<code>++变量</code>，<code>--变量</code>：先对变量加/减1，再使用自增或自减后的变量进行计算;<br>·<code>变量++</code>，<code>变量--</code>：先使用变量进行计算，再进行变量加/减1。</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">int</span> numA = <span class="number">10</span>;</div><div class="line">        <span class="keyword">int</span> numB = <span class="number">20</span>;</div><div class="line">        <span class="comment">// ++变量，先numA + 1</span></div><div class="line">        <span class="comment">// 然后(numA + 1) + numB内容</span></div><div class="line">        <span class="comment">// 最后对numB加1</span></div><div class="line">        <span class="keyword">int</span> result = (++numA) + (numB++);</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"numA="</span> + numA); <span class="comment">// 11</span></div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"numB="</span> + numB); <span class="comment">// 21</span></div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"result="</span> + result); <span class="comment">// 31</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="三目运算符"><a class="markdownIt-Anchor" href="#三目运算符"></a> 三目运算符</h3><p>三目运算符根据布尔表达式的结果进行赋值：</p><pre><code>value_type value_name = 布尔表达式 ? true_value : false_value;</code></pre><p>利用三目运算符可以减少判断代码:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class Demo &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        <span class="keyword">int</span> numA = <span class="number">10</span>;</div><div class="line">        <span class="keyword">int</span> numB = <span class="number">20</span>;</div><div class="line">        <span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</div><div class="line">        <span class="comment">/** 使用三目运算符</span></div><div class="line"><span class="comment">         *  当numA大于numB,返回true,max = numA</span></div><div class="line"><span class="comment">         *  当numA小于numB,返回false,max = numB</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="built_in">max</span> = numA&gt;numB ? numA : numB;</div><div class="line">        <span class="comment">// 不使用三目运算符</span></div><div class="line">        <span class="comment">// if (numA &gt; numB) &#123;</span></div><div class="line">        <span class="comment">//    max = numA;</span></div><div class="line">        <span class="comment">//&#125; else &#123;</span></div><div class="line">        <span class="comment">//    max = numB;</span></div><div class="line">        <span class="comment">//&#125;</span></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">max</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="逻辑运算符"><a class="markdownIt-Anchor" href="#逻辑运算符"></a> 逻辑运算符</h3><ol><li>逻辑运算符：与<code>&amp;，&amp;&amp;</code>、或<code>|，||</code>、非<code>!</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.java.demo;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">        System.out.println(!flag); <span class="comment">// false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol start="2"><li>布尔表达式的连接，只能使用<code>与</code>和<code>或</code>操作</li></ol><blockquote><p><code>与</code>：所有条件都为true时，结果为true;有一个为false，结果就是false.</p></blockquote><p><strong>范例</strong>：普通与<code>&amp;</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="comment">// 除数不能为0</span></div><div class="line">        <span class="keyword">if</span> ((<span class="number">1</span> == <span class="number">2</span>) &amp; (<span class="number">10</span> / <span class="number">0</span> == <span class="number">0</span>))&#123;</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"Hello"</span>); <span class="comment">// 报错</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>结果</strong>：程序报错，因为<code>&amp;</code>会对所有条件进行判断。但就与的特点而言，前一个条件为false，结果就是false，后续的判断没有意义。<br><strong>范例</strong>：短路与<code>&amp;&amp;</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="comment">// 除数不能为0</span></div><div class="line">        <span class="keyword">if</span> ((<span class="number">1</span> == <span class="number">2</span>) &amp;&amp; (<span class="number">10</span> / <span class="number">0</span> == <span class="number">0</span>))&#123;</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"Hello"</span>); <span class="comment">// false,不报错</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>结果</strong>:程序不报错，因为<code>&amp;&amp;</code>只要有一个条件为false后，后续判断就不再进行，从而提高了效率。</p><blockquote><p>或操作：一个条件为true，结果为true。</p></blockquote><p><strong>范例</strong>：普通或<code>|</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> ((<span class="number">1</span> &lt; <span class="number">2</span> ) | (<span class="number">10</span> / <span class="number">0</span> == <span class="number">0</span>))&#123;</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"Hello"</span>); <span class="comment">// 报错</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>结果</strong>：使用<code>|</code>，会对所有条件进行判断，但是或运算的特点是：一个条件为true，结果就是true。<br><strong>范例</strong>：短路或<code>||</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> ((<span class="number">1</span> &lt; <span class="number">2</span> ) || (<span class="number">10</span> / <span class="number">0</span> == <span class="number">0</span>))&#123;</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"Hello"</span>); <span class="comment">// true,不报错</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>因此使用逻辑运算时就使用<code>&amp;&amp;</code>和<code>||</code>。</p></blockquote><h3 id="位运算符"><a class="markdownIt-Anchor" href="#位运算符"></a> 位运算符</h3><ol><li>数学计算为十进制。Java支持二进制、八进制和十六进制。如果要想将十进制变为二进制，采用的方式为：除2，取余，倒序。</li><li>位运算主要是进行二进制数据操作，位运算符：<code>&amp;</code>、<code>|</code>、<code>&gt;&gt;</code>(移位)、<code>&lt;&lt;</code>、<code>^</code>(反码)、<code>~</code>。<br><strong>范例</strong>：位与<code>&amp;</code></li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">int</span> numA = <span class="number">9</span>;</div><div class="line">        <span class="keyword">int</span> numB = <span class="number">11</span>;</div><div class="line">        System.<span class="keyword">out</span>.println(numA &amp; numB); <span class="comment">// 9</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>运算过程</strong>：</p><pre><code>  1001 → 9&amp; 1011 → 11  1001 →  9</code></pre><p><strong>范例</strong>：位或<code>|</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">int</span> numA = <span class="number">9</span>;</div><div class="line">        <span class="keyword">int</span> numB = <span class="number">11</span>;</div><div class="line">        System.<span class="keyword">out</span>.println(numA | numB); <span class="comment">// 11</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>运算过程</strong>：</p><pre><code>  1001 → 9| 1011 → 11  1011 → 11</code></pre><p><strong>范例</strong>：移位（最快方式计算2的3次方）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">num</span> = <span class="number">2</span>;</div><div class="line">        <span class="built_in">num</span> = <span class="built_in">num</span> &lt;&lt; <span class="number">2</span>; <span class="comment">// 向左移位</span></div><div class="line">        System.out.println(<span class="built_in">num</span>); <span class="comment">// 8,相当于2的3次方</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>运算过程</strong>：</p><pre><code>    0010 → 22&lt;&lt; 1000 → 8</code></pre><blockquote><p><strong>章节小问题：请解释<code>&amp;</code>与<code>&amp;&amp;</code>的区别，以及<code>|</code>与<code>||</code>的区别:</strong><br>1. 在逻辑运算中：<br>  |- <code>&amp;</code>和<code>|</code>会对所有条件进行判断后，返回结果<br>  |- <code>&amp;&amp;</code>只要一个条件返回false，就不进行后续判断，结果为false<br>  |- <code>||</code>只要一个条件为true，就不进行后续判断，结果为true<br>2. 在位运算中：<br>  |- <code>&amp;</code>为位与元算，<code>|</code>为位或元算<br>  |- <code>&amp;&amp;</code>和<code>||</code>不能用于位运算</p></blockquote>]]></content>
    
    <summary type="html">
    
      介绍Java的运算符，适合新手阅读。
    
    </summary>
    
      <category term="语言" scheme="https://youyouvi.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://youyouvi.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="https://youyouvi.github.io/2017/09/23/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>https://youyouvi.github.io/2017/09/23/Markdown语法/</id>
    <published>2017-09-23T09:19:24.606Z</published>
    <updated>2017-09-24T07:15:05.283Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Markdown是一种轻量级的标记语言，语法简单，由一些符号组成，这些符号作用一目了然，实现易读易写的目标。Markdown兼容HTML，即你可以直接在文本中添加HTML语言，但是你不能在HTML区块标签间使用Markdown语法。</p></blockquote><h2 id="markdown语法"><a class="markdownIt-Anchor" href="#markdown语法"></a> Markdown语法</h2><h3 id="区块元素"><a class="markdownIt-Anchor" href="#区块元素"></a> 区块元素</h3><h4 id="段落与换行"><a class="markdownIt-Anchor" href="#段落与换行"></a> 段落与换行</h4><p>一个Markdown段落是由一个或多个连续的文本行组成的。在Markdown中是<strong>无法使用空格或制表符来缩进的</strong>，因为其默认一个空格就是一个空行。</p><h4 id="标题"><a class="markdownIt-Anchor" href="#标题"></a> 标题</h4><p>Markdown支持两种标题的语法，类Setext形式和类Atx形式，接下来介绍的类Atx形式：该形式是在行首插入1到6个<code>#</code>，对应1到6级标题。</p><pre><code># 这是H1## 这是H2...###### 这是H6</code></pre><h4 id="区块引用blockquotes"><a class="markdownIt-Anchor" href="#区块引用blockquotes"></a> 区块引用Blockquotes</h4><p>Markdown标记区块引用方式如下：</p><pre><code>&gt; 文本内容。&gt;&gt; 文本中也可以使用嵌套引用，只要根据层次加上不同数量的&gt;</code></pre><p>在引用的区域中，也可以使用其他的Markdown语法。</p><h4 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h4><p>Markdown支持有序列表和无序列表。无序列表使用<code>星号</code>、<code>减号</code>或<code>加号</code>作为列表标记:</p><pre><code>* red- green+ blue</code></pre><p>有序列表则使用数字接着一个英文句号：</p><pre><code>1. red2. green3. blue</code></pre><p>如果列表项目间用空行分开，在输出HTML时Markdowm就会将内容用段落标签包起来，即：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">* blue</span></div><div class="line"></div><div class="line"><span class="comment">*red</span></div></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">&lt;li&gt;&lt;p&gt;blue&lt;/p&gt;&lt;/li&gt;</div><div class="line">&lt;li&gt;&lt;p&gt;red&lt;/p&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure><p>如果要在列表项目中放入引用，就需要缩进</p><pre><code>* red&gt; this is color</code></pre><p>如果要放入代码块，那就需要连续缩进两次。并且为避免行首出现数字-句号-空白，应在句号前加反斜杠。</p><h4 id="代码区域"><a class="markdownIt-Anchor" href="#代码区域"></a> 代码区域</h4><p>要在Markdown中建立代码区块很简单，只需要缩进4个空格或一个tab即可。</p><h4 id="分隔线"><a class="markdownIt-Anchor" href="#分隔线"></a> 分隔线</h4><p>你可以在一行使用三个以上的<code>星号</code>、<code>减号</code>、<code>下划线</code>来建立一个分隔线，行内不能有其他东西。你可以在星号或减号中间插入空格。</p><pre><code>星号：  * * *减号：  - - -下划线：_ _ _ </code></pre><h3 id="区段元素"><a class="markdownIt-Anchor" href="#区段元素"></a> 区段元素</h3><h4 id="链接"><a class="markdownIt-Anchor" href="#链接"></a> 链接</h4><p>Markdown支持两种形式的链接语法：行内式和参考式。建立一个行内式的链接，只要在方块括号后面紧接着圆括号插入链接即可，如果想要加上链接的title文字，只要网址后面用双引号把title文字包起来即可。</p><pre><code>[example](https://www.baidu.com &quot;Title&quot;)</code></pre><h4 id="强调"><a class="markdownIt-Anchor" href="#强调"></a> 强调</h4><p>Markdown使用星号和下划线标记强调，被<code>*</code>或<code>_</code>包围的字词会被转为用<code>&lt;em&gt;</code>标签包围，而用两个<code>*</code>或<code>_</code>包起来，则变为<code>&lt;strong&gt;</code></p><pre><code>*强调*_强调_**强调**__强调__</code></pre><p>如果只想在文字前后插入普通的星号或下划线，可以使用反斜杠：</p><pre><code>\*文字\*</code></pre><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><p>如果要标记一小段行内代码，可以使用反引号把它包起来，例如：</p><pre><code>`printf()`</code></pre><p>如果要在代码中插入反引号，你可以用多个反引号开启或结束代码区段:</p><pre><code>`` (`) `` 将变为  &lt;p&gt;&lt;code&gt;(`)&lt;/code&gt;&lt;/p&gt;</code></pre><h4 id="图片"><a class="markdownIt-Anchor" href="#图片"></a> 图片</h4><p>插入图片有两种方式：行内式和参考式</p><pre><code>![替代图片的文字](/path/to/img.jpg &quot;文字&quot;)</code></pre><h2 id="结束"><a class="markdownIt-Anchor" href="#结束"></a> 结束</h2><p>感谢您的阅读，如果您有什么问题，请在下方留言，谢谢。</p>]]></content>
    
    <summary type="html">
    
      介绍Markdown的基本语法。
    
    </summary>
    
      <category term="语言" scheme="https://youyouvi.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Markdown" scheme="https://youyouvi.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot使用</title>
    <link href="https://youyouvi.github.io/2017/09/23/SpringBoot%E4%BD%BF%E7%94%A8/"/>
    <id>https://youyouvi.github.io/2017/09/23/SpringBoot使用/</id>
    <published>2017-09-23T08:58:23.811Z</published>
    <updated>2017-09-23T13:08:37.516Z</updated>
    
    <summary type="html">
    
      Spring快速上手使用，适合新手阅读。
    
    </summary>
    
      <category term="框架" scheme="https://youyouvi.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Java" scheme="https://youyouvi.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Go基础知识</title>
    <link href="https://youyouvi.github.io/2017/09/23/Go%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://youyouvi.github.io/2017/09/23/Go基础知识/</id>
    <published>2017-09-23T08:57:17.832Z</published>
    <updated>2017-09-23T13:08:33.805Z</updated>
    
    <summary type="html">
    
      介绍Go的基础知识，适合新手阅读。
    
    </summary>
    
      <category term="语言" scheme="https://youyouvi.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Go" scheme="https://youyouvi.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识(一)</title>
    <link href="https://youyouvi.github.io/2017/09/23/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(%E4%B8%80)/"/>
    <id>https://youyouvi.github.io/2017/09/23/Java基础知识(一)/</id>
    <published>2017-09-23T08:57:00.370Z</published>
    <updated>2017-09-24T07:11:43.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java基础知识"><a class="markdownIt-Anchor" href="#java基础知识"></a> Java基础知识</h2><blockquote><p>Java是一门<strong>面向对象</strong>语言，支持多线程编程;通过使用更为简单的<strong>引用</strong>来进行内存关系的匹配，而不是复杂的指针;Java提供<strong>垃圾自动回收机制</strong>，能更好地处理垃圾空间;可以实现多平台的移植。</p></blockquote><h3 id="第一个java程序"><a class="markdownIt-Anchor" href="#第一个java程序"></a> 第一个Java程序</h3><ol><li>运行Java程序的步骤<br><code>javac xx.java</code>:对Java程序进行编译，生成字节码文件<code>xx.class</code>。<br><code>java xx</code>：对Java程序进行解释。</li><li>Java程序的核心单元—<strong>类</strong><br>类的声明方式有两种:<br><code>public class class_name {}</code>：该声明方式声明的java文件，文件名必须与类名一致，一个类文件中只允许使用一次该声明。<br><code>class class_name {}</code>：一个java文件可以多次使用该声明（不建议如此操作），但编译后会生成多个class文件。</li><li>第一个Java程序：Hello World</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;    <span class="comment">// 包名</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HelloWorld</span> &#123;<span class="comment">// 类</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;    <span class="comment">// 主方法</span></div><div class="line">System.<span class="keyword">out</span>.println(<span class="string">"Hello World"</span>);    <span class="comment">// 方法体</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Java程序都是从<strong>主方法</strong>开始执行的.<code>System.out.println()</code>将内容输出后换行。</p><h3 id="classpath环境属性"><a class="markdownIt-Anchor" href="#classpath环境属性"></a> CLASSPATH环境属性</h3><p>PATH和CLASSPTH的<strong>区别</strong>：<code>PATH</code>是操作系统路径，定义了所有可执行程序的路径；<code>CLASSPATH</code>是Java解释类文件时的加载路径，当<code>java</code>命令运行时，JVM通过CLASSPATH属性设置的路径，加载所需要的类。<br>配置CLASSPATH时，一定要定义一个“.”，表示在当前所在目录进行类的加载。</p><h3 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h3><p><code>// 注释内容</code>：    单行注释<br><code>/* 注释内容 */</code>： 多行注释<br><code>/** 注释内容 */</code>：文档注释</p><h3 id="标识符与关键字"><a class="markdownIt-Anchor" href="#标识符与关键字"></a> 标识符与关键字</h3><ol><li>标识符<br>标识符是指Java程序中的类名、属性名、方法名等，其定义要求如下：<blockquote><p>（1）标识符由字母，数字，_，$组成，不能以数字开头，不能是Java中的关键字或保留字；<br>（2）标识符应尽量有意义，可见名知意。<br>（3）Java标识符可以是中文，但不建议使用中文命名标识符。</p></blockquote></li><li>关键字<br>Java中有两个未使用的关键字<code>goto</code>和<code>const</code>；JDK1.4之后增加了<code>assert</code>关键字；JDK1.5之后增加了<code>enum</code>关键字。</li></ol><h2 id="java数据类型"><a class="markdownIt-Anchor" href="#java数据类型"></a> Java数据类型</h2><ol><li>Java数据类型分为两大类：<code>基础数据类型</code>和<code>引用数据类型</code><br><strong>两者的区别在于基础数据类型不需要进行内存分配，而引用数据类型需要进行内存分配。</strong></li></ol><blockquote><p>基本数据类型：<br>    |-数值型：<br>        |-整型：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>； →默认值：<code>0</code>；<br>        |-浮点型：<code>float</code>、<code>double</code>；        →默认值：<code>0.0</code><br>        |-字符型：<code>char</code>；                      →默认值：<code>‘\u0000’</code><br>        |-布尔型：<code>boolean</code>；        →默认值：<code>false</code><br>    |-引用数据类型：数组、类、接口等。  →默认值：<code>null</code></p></blockquote><ol start="2"><li>数据类型的选择原则</li></ol><blockquote><p>（1）整数用<code>int</code>，小数用<code>double</code>；<br>（2）描述日期时间或内存大小，用<code>long</code>；<br>（3）实现内容传递或编码转换用<code>byte</code>；<br>（4）逻辑控制用<code>boolean</code>；<br>（5）避免中文乱码用<code>char</code>。</p></blockquote><h3 id="整型"><a class="markdownIt-Anchor" href="#整型"></a> 整型</h3><ol><li>数字常量属于<code>int</code>型数据，如数字30。<br>常量与变量的区别在于：常量的内容是固定的，变量的内容是可变的。范例–定义int型变量：</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;</div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</div><div class="line">        <span class="comment">// 一个变量名在同一块代码中只允许声明一次</span></div><div class="line">        <span class="comment">// 变量赋值语法：value_type value_name = value ;</span></div><div class="line">        <span class="built_in">int</span> <span class="built_in">num</span> = <span class="number">10</span>; </div><div class="line">        <span class="built_in">num</span> = <span class="built_in">num</span> * <span class="number">2</span>;</div><div class="line">        System.out.println(<span class="built_in">num</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol start="2"><li>每个数据类型都有其对应的存储范围</li></ol><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.java.demo;</div><div class="line"><span class="keyword">public</span> class Demo &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">max</span> = Integer.MAX_VALUE;  <span class="comment">// int型数据的最大值</span></div><div class="line">        <span class="built_in">int</span> <span class="built_in">min</span> = Integer.MIN_VALUE;  <span class="comment">// int型数据的最小值</span></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">max</span>);      <span class="comment">// 2147483647</span></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">max</span> + <span class="number">1</span>);  <span class="comment">// -2147483648</span></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">min</span>);      <span class="comment">// -2147483648</span></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">min</span> - <span class="number">1</span>);  <span class="comment">// 2147483647</span></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">min</span> - <span class="number">2</span>);  <span class="comment">// 2147483646</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当数据超过<code>int</code>型数据的保存范围时，数值会按照循环的形式出现，即（最大值+1）变为最小值，再+1变为第二小的最小值，以此类推。这是因为数据是按照二进制进行的，第一位是符号位，而其他31位是数据位。这种现象称为<code>数据溢出</code>，解决方法是<strong>扩大数据范围</strong>：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.java.demo;</div><div class="line"><span class="keyword">public</span> class Demo &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">max</span> = Integer.MAX_VALUE;</div><div class="line">        <span class="built_in">int</span> <span class="built_in">min</span> = Integer.MIN_VALUE;</div><div class="line">        <span class="comment">// int变量 + long变量 = long变量,扩大了数据的范围</span></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">max</span> + <span class="number">1</span>L); <span class="comment">// 2147483648</span></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">min</span> - (<span class="keyword">long</span>)<span class="number">1</span>); <span class="comment">// -2147483649</span></div><div class="line">        System.out.<span class="built_in">println</span>((<span class="keyword">long</span>)<span class="built_in">min</span> - <span class="number">2</span>); <span class="comment">// -2147483650</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol start="3"><li>数据类型的转换规律</li></ol><blockquote><p>范围小的数据类型与范围大的数据类型计算时，自动转换为范围大的所数据类型；<br>范围大的数据类型只能通过强制转换变为范围小的数据类型。<br>常量进行强制转换，可通过使用常量标记（如<code>L，l</code>可将<code>int</code>型常量变为<code>long</code>型）或使用<code>(数据类型)常量</code>。范例–强制转换：</p></blockquote><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="comment">// 1000是int型，使用long型变量接收，发生自动转换</span></div><div class="line">        <span class="keyword">long</span> num = <span class="number">1000</span>;</div><div class="line">    <span class="comment">// long型变为int型，强制转换</span></div><div class="line">        <span class="keyword">int</span> x = (<span class="keyword">int</span>) num; </div><div class="line">        System.<span class="keyword">out</span>.println(x); <span class="comment">// 1000</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当进行强制转换的数值超出范围小的数据类型的范围时，依然会发生<strong>数据溢出</strong>。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="comment">// 2147483650L是long型数据，超出int型的范围</span></div><div class="line">        <span class="keyword">long</span> num = <span class="number">2147483650</span>L ;</div><div class="line">        <span class="keyword">int</span> x = (<span class="keyword">int</span>) num; </div><div class="line">        System.<span class="keyword">out</span>.println(x); <span class="comment">// -2147483646，数据溢出</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>byte</code>型数据的取值范围为<code>-128~127</code>，当整数数值在这个范围内时，会自动转型；超出<code>byte</code>范围时会发生数据溢出。<br>4. 注意点<br>变量声明时应设置具体数值，不使用默认值。在方法中定义的变量，其默认值是无效的。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="comment">// 未给变量赋值</span></div><div class="line"><span class="keyword">int</span> num;  </div><div class="line"><span class="comment">// 报错,未初始化变量,无法使用该变量</span></div><div class="line">        System.<span class="keyword">out</span>.println(num); </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="浮点型"><a class="markdownIt-Anchor" href="#浮点型"></a> 浮点型</h3><ol><li>Java中浮点数属于<code>double</code>型（<code>double</code>型是保存范围最广的类型）。</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">double</span> num = <span class="number">10.2</span>; <span class="comment">// 10.2是小数，属于double型</span></div><div class="line">        <span class="comment">// double型 * int型 = double型</span></div><div class="line">        System.<span class="keyword">out</span>.println(num * <span class="number">2</span>); <span class="comment">// 20.4</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>所以使用<code>float</code>数据须将<code>double强制转换为float型</code>：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">float</span> fA = <span class="number">10.2</span>F;         <span class="comment">// 强制转型方式一</span></div><div class="line">        <span class="keyword">float</span> fB = (<span class="keyword">float</span>) <span class="number">10.2</span>; <span class="comment">// 强制转型方式二</span></div><div class="line">        System.<span class="keyword">out</span>.println(fA);  <span class="comment">// 10.2</span></div><div class="line">        System.<span class="keyword">out</span>.println(fB);  <span class="comment">// 10.2</span></div><div class="line">        System.<span class="keyword">out</span>.println(fA * fB); <span class="comment">// 104.03999,该bug无法解决</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>开发过程中要考虑到<code>整型数据不保留小数位</code>：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">int</span> x = <span class="number">5</span>;</div><div class="line">        <span class="keyword">int</span> y = <span class="number">9</span>;</div><div class="line">        System.<span class="keyword">out</span>.println(y / x); <span class="comment">// 1</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>因为<code>int型/int型=int型</code>，不保留小数位，所以要取得正确的计算结果，需要将其中一个整型变为浮点型：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">int</span> x = <span class="number">5</span>;</div><div class="line">        <span class="keyword">int</span> y = <span class="number">9</span>;</div><div class="line">        System.<span class="keyword">out</span>.println(y / (<span class="keyword">double</span>) x); <span class="comment">// 1.8</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="字符型"><a class="markdownIt-Anchor" href="#字符型"></a> 字符型</h3><ol><li>byte<br><code>byte</code>是字节，1字符=2字节。Java使用十六进制<code>UNICODE</code>编码，可以保存任意符号，并且考虑到与其他语言的结合，包含了ASCII码的部分编码，以实现无缝衔接。</li><li>字符使用单引号<code>'</code>声明，一对单引号只能保存一位字符。</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">char</span> c = <span class="string">'A'</span>;</div><div class="line">        <span class="keyword">int</span> num = c; <span class="comment">// char型可以自动转换为int型</span></div><div class="line">        System.<span class="keyword">out</span>.println(c);</div><div class="line">        System.<span class="keyword">out</span>.println(num); <span class="comment">// 65,是A的ASCII码值</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol start="3"><li>编码：<code>'A'</code>(65)~<code>'Z'</code>(90); <code>'a'</code>（97）~<code>'z'</code>（122）; <code>'0'</code>（48）~<code>'9'</code>(57),可利用A和a的编码差为32，实现字母大小写转换：</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">char</span> c = <span class="string">'A'</span>;</div><div class="line">        <span class="keyword">int</span> num = c;     <span class="comment">// char型变为int型才能进行四则运算</span></div><div class="line">        num = num + <span class="number">32</span>;  <span class="comment">// 大写与小写编码值差为32</span></div><div class="line">        c = (<span class="keyword">char</span>) num;  <span class="comment">// int型只能强制转换为char型</span></div><div class="line">        System.<span class="keyword">out</span>.println(c); <span class="comment">// a</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol start="4"><li>传统编程语言字符只能保存英文标记，但UNICODE可以保存任何文字包括中文。</li></ol><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package com.java.demo;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        <span class="keyword">char</span> c = <span class="string">'游'</span>;</div><div class="line">        <span class="keyword">int</span> num = c;</div><div class="line">        System.<span class="keyword">out</span>.println(num); <span class="comment">// 28216</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由于Java保存中文很方便,因此处理断句时，字符数据很有用，其他时候基本用不到。</p><h3 id="布尔型"><a class="markdownIt-Anchor" href="#布尔型"></a> 布尔型</h3><p>布尔型返回逻辑结果，只保存两种数据：<code>true</code>和<code>false</code>，主要用于逻辑控制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.java.demo;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line">        <span class="comment">//  if (布尔值)&#123;满足条件时的操作&#125;</span></div><div class="line">        <span class="keyword">if</span> (!flag) &#123;</div><div class="line">            System.out.println(<span class="string">"Hello World !"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="string型"><a class="markdownIt-Anchor" href="#string型"></a> String型</h3><ol><li>String型<br><code>String</code>属于引用数据类型（是类,Java中类名称首字母大写），表示字符串，即多个字符的集合，使用双引号<code>&quot;&quot;</code>声明。</li></ol><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.java.demo;</div><div class="line"><span class="keyword">public</span> class Demo &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        <span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"Hello World !"</span>; <span class="comment">// str为字符串变量</span></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">str</span>);</div><div class="line">        <span class="comment">// "Hello World !"为字符串常量</span></div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Hello World !"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol start="2"><li><code>+</code>可实现字符串连接</li></ol><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.java.demo;</div><div class="line"><span class="keyword">public</span> class Demo &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        <span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"Hello"</span>;</div><div class="line">        <span class="built_in">str</span> = <span class="built_in">str</span> + <span class="string">" World !"</span>;</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">str</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当四则运算与字符串连接同时存在时：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.java.demo;</div><div class="line"><span class="keyword">public</span> class Demo &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        <span class="built_in">int</span> numA = <span class="number">100</span>;</div><div class="line">        <span class="keyword">double</span> numB = <span class="number">99.9</span>;</div><div class="line">        <span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"加法计算："</span> + numA + numB;</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">str</span>); <span class="comment">// 加法计算：10099.9</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>出现上述结果是因为小范围数据会自动转型为大范围数据，即<code>String型+任意数据类型=String型</code>，然后进行字符串连接，可使用()来实现正确的运算：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.java.demo;</div><div class="line"><span class="keyword">public</span> class Demo &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        <span class="built_in">int</span> numA = <span class="number">100</span>;</div><div class="line">        <span class="keyword">double</span> numB = <span class="number">99.9</span>;</div><div class="line">        <span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"加法计算："</span> + (numA + numB);</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">str</span>); <span class="comment">// 加法计算：199.9</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol start="3"><li>Java支持转义字符，<br>例如：换行<code>\n</code>、制表符<code>\t</code>、反斜杠<code>\\</code>、双引号<code>\&quot;</code>、单引号<code>\'</code>：</li></ol><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.java.demo;</div><div class="line"><span class="keyword">public</span> class Demo &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">        <span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"Hello \"World\" \nHello MLDN"</span>;</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="built_in">str</span>);</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * Hello "World"</span></div><div class="line"><span class="comment">         * Hello MLDN</span></div><div class="line"><span class="comment">         */</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      介绍Java的基础知识和数据类型，适合新手阅读。
    
    </summary>
    
      <category term="语言" scheme="https://youyouvi.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://youyouvi.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Gitee+Hexo搭建个人博客</title>
    <link href="https://youyouvi.github.io/2017/09/22/Gitee+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://youyouvi.github.io/2017/09/22/Gitee+Hexo搭建个人博客/</id>
    <published>2017-09-22T13:48:40.242Z</published>
    <updated>2017-09-23T13:08:25.440Z</updated>
    
    <content type="html"><![CDATA[<p>码云(Gitee): <a href="https://gitee.com" target="_blank" rel="external">https://gitee.com</a> 由于github在国外，被墙了，于是把目光投向了国产Github，Gitee，算是支持国产吧。<br>Hexo：一个快速、简洁高效的博客框架，使用Markdown解析文本。</p><h2 id="环境搭建"><a class="markdownIt-Anchor" href="#环境搭建"></a> 环境搭建</h2><h3 id="安装nodejs"><a class="markdownIt-Anchor" href="#安装nodejs"></a> 安装Node.js</h3><p>Windows用户访问Node.js <a href="https://nodejs.org/en" target="_blank" rel="external">https://nodejs.org/en</a> 下载Node.js安装包后，直接运行安装即可(node.js下载也很慢，最好翻墙)。安装后，更换下npm的源，否则下载速度着实让人着急。</p><pre><code>$ npm config set registry http://registry.npm.taobao.org/</code></pre><h3 id="hexo安装"><a class="markdownIt-Anchor" href="#hexo安装"></a> Hexo安装</h3><pre><code>$ npm install -g hexo-cli</code></pre><p>Hexo的基本使用请查看hello-world文中所写。</p><h3 id="本地运行hexo"><a class="markdownIt-Anchor" href="#本地运行hexo"></a> 本地运行Hexo</h3><p>在本地选中一个空文件夹（一定要是空文件夹！！），在空文件中执行如下命令，生成Hexo运行所需要的文件：</p><pre><code>$ hexo init</code></pre><p>初始化后，文件夹的目录如下：</p><pre><code>.├── .deploy       #需要部署的文件├── node_modules  #Hexo插件├── public        #生成的静态网页文件├── scaffolds     #模板├── source        #博客正文和其他源文件等都应该放在这里|   ├── _drafts   #草稿|   └── _posts    #文章├── themes        #主题├── _config.yml   #全局配置文件└── package.json</code></pre><p>之后在本地执行如下命令后，即可访问 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 访问Hexo页面</p><pre><code>$ hexo s</code></pre><h3 id="git安装"><a class="markdownIt-Anchor" href="#git安装"></a> Git安装</h3><p>Git安装包地址 <a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a> ,根据操作系统选择安装包下载后安装即可。</p><h3 id="注册码云账号并创建一个项目"><a class="markdownIt-Anchor" href="#注册码云账号并创建一个项目"></a> 注册码云账号，并创建一个项目</h3><p><img src="/2017/09/22/Gitee+Hexo搭建个人博客/new project.png" alt="创建新项目"><br><br><img src="/2017/09/22/Gitee+Hexo搭建个人博客/new project2.png" alt="创建新项目"><br></p><h3 id="获取项目地址"><a class="markdownIt-Anchor" href="#获取项目地址"></a> 获取项目地址</h3><p><img src="/2017/09/22/Gitee+Hexo搭建个人博客/get.png" alt="获取项目地址"><br></p><h2 id="发布博客"><a class="markdownIt-Anchor" href="#发布博客"></a> 发布博客</h2><h3 id="修改hexo配置文件_configyml"><a class="markdownIt-Anchor" href="#修改hexo配置文件_configyml"></a> 修改Hexo配置文件_config.yml</h3><pre><code>deploy:type: gitrepo: 码云的项目地址branch: master</code></pre><h3 id="部署博客"><a class="markdownIt-Anchor" href="#部署博客"></a> 部署博客</h3><pre><code>$ npm install hexo-deployer-git --save $ hexo g --d  #一键部署</code></pre><p>此时会弹出一个对话框，提示输入码云的账号密码。部署成功后，登陆码云。此时本地文件夹中出现有一个public文件夹，代表部署成功。</p><h3 id="开启page功能"><a class="markdownIt-Anchor" href="#开启page功能"></a> 开启Page功能</h3><p><img src="/2017/09/22/Gitee+Hexo搭建个人博客/open.png" alt="开启Page功能"><br><br><img src="/2017/09/22/Gitee+Hexo搭建个人博客/start.png" alt="开启Page功能"><br><br><img src="/2017/09/22/Gitee+Hexo搭建个人博客/success.png" alt="博客部署成功"></p><h3 id="访问博客"><a class="markdownIt-Anchor" href="#访问博客"></a> 访问博客</h3><p>在浏览器地址栏输入上图中的博客地址，即可访问，效果图如下：<br><img src="/2017/09/22/Gitee+Hexo搭建个人博客/blog.png" alt="我的博客"></p><h2 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h2><p>如果搭建过程中，还有什么问题，请在下方留言。谢谢您的观赏！</p>]]></content>
    
    <summary type="html">
    
      基于国内的Gitee搭建Hexo博客。
    
    </summary>
    
      <category term="Hexo搭建" scheme="https://youyouvi.github.io/categories/Hexo%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://youyouvi.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://youyouvi.github.io/2017/09/22/hello-world/"/>
    <id>https://youyouvi.github.io/2017/09/22/hello-world/</id>
    <published>2017-09-22T08:28:42.118Z</published>
    <updated>2017-09-23T07:11:13.725Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      Hexo基本使用.
    
    </summary>
    
      <category term="Hexo搭建" scheme="https://youyouvi.github.io/categories/Hexo%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="https://youyouvi.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
