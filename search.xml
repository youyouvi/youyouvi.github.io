<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Docker的安装说明]]></title>
      <url>/2017/09/24/Docker%E7%9A%84%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<h2 id="安装及部署docker"><a class="markdownIt-Anchor" href="#安装及部署docker"></a> 安装及部署Docker</h2>
<h3 id="系统和资源说明"><a class="markdownIt-Anchor" href="#系统和资源说明"></a> 系统和资源说明</h3>
<p>Docker系统要求最低CentOS7，且系统必须为64位，且内核版本不低于3.10。<br>
资源需求：Docker1.12.6</p>
<h3 id="安装步骤"><a class="markdownIt-Anchor" href="#安装步骤"></a> 安装步骤</h3>
<p>(1)安装</p>
<pre><code>$ yum install docker
</code></pre>
<p>(2)设置开机启动Docker Daemon进程</p>
<pre><code>$ systemctl start docker.service   // 启动docker
$ systemctl enable docker.service  // 设置Docker开机自启动
$ systemctl disable firewalld      // 关闭防火墙
$ yum -y install iptables-services // 安装iptable服务
$ systemctl start iptables.service   // 启动iptable
$ systemctl enable iptables.service  // 设置iptable开机自启动
</code></pre>
<p>(3)安装成功的Docker</p>
<pre><code>$ docker version
</code></pre>
<img src="/2017/09/24/Docker的安装说明/success.png" alt="Docker安装成功">  
<p>(4)建立docker用户组，将使用docker的用户加入docker用户组。</p>
<pre><code>$ groupadd docker
$ usermod -aG docker $USER
</code></pre>
<h3 id="docker的代理配置"><a class="markdownIt-Anchor" href="#docker的代理配置"></a> Docker的代理配置</h3>
<pre><code>$ vim /usr/lib/systemd/system/docker.service
[Service]
Environment=”HTTP_PROXY=http://192.168.13.19:7777”
Environment=”HTTPS_PROXY=http://192.168.13.19:7777”
Type=notify
</code></pre>
<h3 id="docker配置加速器"><a class="markdownIt-Anchor" href="#docker配置加速器"></a> Docker配置加速器</h3>
<p>国内访问Docker Hub可能有些慢，因此我们可以配置加速器。阿里云提供了<a href="https://cr.console.aliyun.com" target="_blank" rel="external">阿里云加速器</a> 注册用户并且申请加速器后，会获得　<a href="https://xxx.mirror.aliyuncs.com" target="_blank" rel="external">https://xxx.mirror.aliyuncs.com</a> 这样的地址。<br>
<img src="/2017/09/24/Docker的安装说明/dockerhub.png" alt="Docker加速器"></p>
<pre><code>$ vim /usr/lib/systemd/system/docker.service
  ExecStart= --registry-mirror=https://xxx.mirror.aliyuncs.com
$ systemctl daemon-reload  //　重新加载配置
$ systemctl restart docker //　重启docker
</code></pre>
<h3 id="docker配置文件说明"><a class="markdownIt-Anchor" href="#docker配置文件说明"></a> Docker配置文件说明</h3>
<pre><code>$ vim /etc/sysconfig/docker
OPTIONS='
 --selinux-enabled  //　是否开启selinux，默认开启
 --insecure registry ip:port // 添加私人仓库地址
 --bip=ip // 表示网桥docker0的CIDR地址
'
</code></pre>
<h2 id="docker的常用命令"><a class="markdownIt-Anchor" href="#docker的常用命令"></a> Docker的常用命令</h2>
<h3 id="docker信息查看"><a class="markdownIt-Anchor" href="#docker信息查看"></a> Docker信息查看</h3>
<p>(1)查看docker进程状态</p>
<pre><code>$ systemctl status docker
</code></pre>
<p>(2)查看docker的具体信息</p>
<pre><code>$ docker info
</code></pre>
<p>(3)查看docker的版本信息</p>
<pre><code>$ docker version
</code></pre>
<h3 id="docker的镜像操作"><a class="markdownIt-Anchor" href="#docker的镜像操作"></a> Docker的镜像操作</h3>
<p>(1)查找镜像</p>
<pre><code>$ docker search image_name
</code></pre>
<p>(2)拉取镜像</p>
<pre><code>$ docker pull image_name:tag
</code></pre>
<p>(3)列出本地镜像</p>
<pre><code>$ docker images
</code></pre>
<p>列表参数说明</p>
<blockquote>
<p>Repository：镜像的仓库源<br>
Tag：镜像的标签<br>
Image ID： 镜像ID<br>
Created： 镜像的创建时间<br>
Size： 镜像大小</p>
</blockquote>
<p>(4)设置镜像标签</p>
<pre><code>$ docker tag image_id tag
</code></pre>
<p>(5)利用镜像创建容器</p>
<pre><code>$ docker run image_name:tag command
</code></pre>
<p>(6)提交镜像</p>
<pre><code>$ docker commit -m=&quot;描述信息&quot; -a=&quot;author&quot; image_name new_image_name
</code></pre>
<h3 id="docker的容器操作"><a class="markdownIt-Anchor" href="#docker的容器操作"></a> Docker的容器操作</h3>
<p>(1)启动容器</p>
<pre><code>$ docker run option host_port:contaniner_port image_name:tag command
</code></pre>
<blockquote>
<p>例如：docker run -it -d -p 5000:5000 java java -version<br>
-d：后台运行容器<br>
-p:将容器端口映射到宿主机端口<br>
-it:进行交互式操作<br>
command: 执行java -version命令</p>
</blockquote>
<p>(2)查看容器</p>
<pre><code>$ docker ps // 查看正在运行的容器
</code></pre>
<p>(3)容器生命周期命令</p>
<pre><code>$ docker create image:tag  // 创建容器但不启动
$ docker start container_name   // 启动容器
$ docker stop contaniner_name   // 停止容器
$ docker restart container_name // 重启容器
$ docker pause contaniner_name  // 暂停容器内所有进程
$ docker unpause contaniner_name // 恢复容器内所有进程
$ docker rm contaniner  // 删除容器
$ docker rm ${docker ps -a -q} // 删除所有停止的容器</code></pre>
]]></content>
      
        <categories>
            
            <category> 容器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker的简单说明]]></title>
      <url>/2017/09/24/Docker%E7%9A%84%E7%AE%80%E5%8D%95%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<h2 id="docker简介"><a class="markdownIt-Anchor" href="#docker简介"></a> Docker简介</h2>
<h3 id="docker的概念"><a class="markdownIt-Anchor" href="#docker的概念"></a> Docker的概念</h3>
<p><code>Docker</code>最初是dotCloud公司的内部项目，是基于dotCloud公司多年云服务的一次革新，于2013年3月开源。<code>Docker</code>被称为第三代Paas平台，是一种容器（虚拟化的轻量级替代技术）技术，将<code>应用软件及其依赖软件</code>（运行时环境、系统工具、系统库）等打包在容器中，使应用具备完整性、移植性和隔离性。以容器的方式交付应用，可以让应用无差别地运行在开发、测试、生产环境，提供标准化的环境和标准化的交付、标准化的部署。</p>
<h3 id="dcoker的技术依赖"><a class="markdownIt-Anchor" href="#dcoker的技术依赖"></a> Dcoker的技术依赖</h3>
<p>Docker使用<code>Go</code>语言进行开发实现，基于Linux内核的<code>cgroup</code>、<code>namespace</code>以及AUFS类的<code>UnionFS</code>等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其他的隔离的进程，因此也称其为容器。最初实现是基于<code>LXC</code>、0.7后去除LXC，使用自行开发的<code>libcontainer</code>。从1.11开始，则使用<code>runC</code>和<code>containerd</code>。</p>
<blockquote>
<p>（1）<code>cgroup</code>是将任意进程进行分组化管理的Linux内核功能。重要概念是<code>子系统</code>，即资源控制器。先挂载子系统，然后在子系统中创建一个control group节点，将需要控制的进程id和属性写入，从而完成内存的资源限制。<br>
（2）<code>LXC</code>（Linux containers），一种基于容器的操作系统层级的虚拟技术，借助于<code>namespace</code>的隔离机制和<code>cgroup</code>限额功能，提供了一套统一的API和工具来建立和管理container，旨在提供一个共享kernel的OS级虚拟化方法。<br>
（3）<code>AUFS</code>是一个能透明覆盖一或多个现有文件系统的层状文件系统，支持将不同目录挂载到同一个虚拟文件系统下，可以把不同的目录联合在一起，组成一个单一的目录。<br>
（4）<code>App打包</code>：Docker额外提供的Feature,标准统一的打包部署运行方案。</p>
</blockquote>
<h3 id="docker的优势"><a class="markdownIt-Anchor" href="#docker的优势"></a> Docker的优势</h3>
<p>Docker在容器的基础上，进行了进一步封装，从文件系统、网络互联到进程隔离等，极大地简化了容器的创建和维护，使得Docker技术比虚拟机技术更为轻便、快捷。Docker和传统虚拟化方式的不同：<code>传统虚拟机技术</code>是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上运行所需的应用进程;而<code>容器</code>内的应用进程直接运行于宿主的内核，没有自己的内核，而且也没有进行硬件虚拟，所以容器更为轻便。</p>
<blockquote>
<p><strong>（1）更高效的利用系统资源</strong><br>
由于容器不需要硬件虚拟化以及运行完整的操作系统等额外开销，Docker对系统的资源利用率更高。因此一个相同配置的主机，可以运行更多应用。<br>
<strong>（2）更快速的启动</strong><br>
Docker容器应用由于<code>直接运行于宿主内核</code>，无需启动完整的操作系统，因此可以做到<code>秒级</code>，甚至<code>毫秒级</code>的启动，大大节约了开发、测试、部署的时间。<br>
<strong>（3）一致的运行环境</strong><br>
Docker镜像提供了<code>除内核外完整的运行时环境</code>，确保了应用运行环境的一致性。<br>
<strong>（4）持续交付和部署</strong><br>
Docker可以通过<code>定制应用镜像</code>实现持续集成、持续交付、部署。开发人员可以通过<code>Dockerfile</code>来创建镜像，并结合<code>持续集成（Continuous integration）系统</code>进行集成测试，而运维人员则可以直接在生成环境中快速部署该镜像，甚至结合<code>持续部署（Continuous Delivery/Deployment）系统</code>进行自动部署。而且使用Dockerfile使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需环境，帮助更好地部署该镜像。<br>
<strong>（5）更轻松的迁移</strong><br>
由于Docker确保了运行环境的一致性，使得应用迁移更加容易。<br>
<strong>（6）更轻松的维护和扩展</strong><br>
Docker使用的<code>分层存储以及镜像技术</code>，使得应用重复部分的复用更容易，也使得维护更新更容易,扩展镜像更容易.</p>
</blockquote>
<h2 id="docker相关的基础概念"><a class="markdownIt-Anchor" href="#docker相关的基础概念"></a> Docker相关的基础概念</h2>
<h3 id="docker-image"><a class="markdownIt-Anchor" href="#docker-image"></a> Docker Image</h3>
<p>操作系统分为内核和用户空间。对于Linux而言，内核启动后，会挂载root文件系统为其提供用户空间支持。<code>Docker镜像（Image）</code>就相当于是一个root文件系统。Docker镜像是一个特殊的文件系统，除了提供容器运行时所需的<code>程序、库、资源、配置等文件</code>外，还包含一些为运行时准备的<code>配置参数</code>（如匿名卷，环境变量，用户等）。镜像不包含任何动态数据，其内容在构建后也不会被改变。</p>
<h3 id="分层存储"><a class="markdownIt-Anchor" href="#分层存储"></a> 分层存储</h3>
<blockquote>
<p>因为传统镜像包含操作系统<code>完整的root文件系统</code>，其体积往往庞大。因此在Docker设计时，就充分利用<code>Union FS</code>技术，将其设计为<code>分层存储</code>的架构。所以严格来说，Docker镜像并非像ISO那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说由多层文件系统联合组成。</p>
</blockquote>
<p>镜像构建时，会<code>一层层构建</code>，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除某一层文件时，仅在当前层标记为该文件已经删除，但实际该文件会一直跟随镜像。因此构建镜像时，每一层尽量只包含该层需要添加东西，<code>任何额外的东西应在该层构建结束前清理结束</code>。<br>
分层存储使得镜像的复用、定制、甚至以此为基础构建新的镜像变得更容易。</p>
<h3 id="docker-container"><a class="markdownIt-Anchor" href="#docker-container"></a> Docker Container</h3>
<p><code>镜像（Image）</code>是静态定义，<code>容器（Container）</code>是镜像运行时的实体。容器可以被创建、启动、停止等。<br>
容器的实质是<code>进程</code>，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的root文件系统、网络配置、进程空间，甚至自己的用户ID空间。容器内的进程是运行在一个隔离的环境中，使用起来，就像是在一个独立于宿主的系统下操作。这特性使得容器封装的应用比直接在宿主机运行更安全。<br>
容器也是<code>分层存储</code>的，每个容器运行时<code>以镜像为基础层</code>，在其上创建一个当前容器的<code>存储层</code>，我们可以称这个为容器运行时读写而准备的存储层为<code>容器存储层</code>。<br>
容器存储层的生存周期和容器周期一样，容器消亡时，容器存储层随之消失。</p>
<blockquote>
<p>按照Docker最佳实践的要求:容器不应该向存储层写入任何数据，容器存储层要保持无状态化。所有文件写入操作，都应该使用数据卷或者绑定宿主机目录，在这些位置的读取会跳过容器存储层，直接对宿主或网络存储发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，不随着容器消亡。</p>
</blockquote>
<h3 id="docker-registry"><a class="markdownIt-Anchor" href="#docker-registry"></a> Docker Registry</h3>
<p>镜像构建完成后，可以很容易地在本地运行。但如需在其他服务器使用该镜像，就需要一个集中的存储、分发镜像的服务，即<code>Docker Registry</code>。<br>
一个<code>Docker Registry</code>包含多个<code>仓库（Repository）</code>；每个仓库包含多个标签<code>Tag</code>；每个Tag对应一个镜像。通常一个仓库中会包含同一个软件不同版本的镜像，而标签就对应该软件的各个版本。我们可以通过<code>&lt;仓库名&gt;:&lt;标签&gt;</code>来获取指定版本的镜像，如果不给出标签，就将以<code>latest</code>为默认标签。<br>
<code>Docker Registry公开服务</code>是开放给用户使用、允许用户管理镜像的服务，一般允许用户免费上传、下载公开的镜像。最常使用的Registry公开服务就是官方的<code>Docker Hub</code>。<br>
除了公开服务外，用户还可以在本地搭建<code>私有的Docker Registry</code>。Docker官方提供<code>Docker Registry</code>镜像，可以直接使用作为私有Registry服务。</p>
]]></content>
      
        <categories>
            
            <category> 容器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java基础知识(二)]]></title>
      <url>/2017/09/24/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(%E4%BA%8C)/</url>
      <content type="html"><![CDATA[<h2 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> 运算符</h2>
<blockquote>
<p>常用运算符：四则运算符、逻辑运算符、三目运算符和位运算符。</p>
</blockquote>
<h3 id="基本运算符"><a class="markdownIt-Anchor" href="#基本运算符"></a> 基本运算符</h3>
<ol>
<li><code>=</code>为赋值运算符。</li>
<li>四则运算符基本组成：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>。<strong>不要使用运算符编写过于复杂的计算。</strong></li>
</ol>
<pre class="highlight"><code class="">public class Demo {
    public static void main(String[] args) {
        int numA = 10;
        double numB = 20;
        int numC = 3;
        System.out.println(&quot;加法计算：&quot; + (numA + numB));
        System.out.println(&quot;减法计算：&quot; + (numA - numB));
        System.out.println(&quot;乘法计算：&quot; + (numA * numB));
        System.out.println(&quot;除法计算：&quot; + (numA / numB));
        System.out.println(&quot;求模计算：&quot; + (numA % numC));
    }
}
</code></pre>
<ol start="3">
<li>简化运算符：<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>:</li>
</ol>
<pre class="highlight"><code class="">public class Demo {
    public static void main(String[] args) {
        int numA = 10;
        numA += 2; // 等同于 numA = numA + 2
        System.out.println(&quot;加法计算&quot; + (numA)); // 12
    }
}
</code></pre>
<ol start="4">
<li><code>++</code>（自增），<code>--</code>（自减）：位置不同，功能也不同：<br>
·<code>++变量</code>，<code>--变量</code>：先对变量加/减1，再使用自增或自减后的变量进行计算;<br>
·<code>变量++</code>，<code>变量--</code>：先使用变量进行计算，再进行变量加/减1。</li>
</ol>
<pre class="highlight"><code class="">public class Demo {
    public static void main(String[] args) {
        int numA = 10;
        int numB = 20;
        // ++变量，先numA + 1
        // 然后(numA + 1) + numB内容
        // 最后对numB加1
        int result = (++numA) + (numB++);
        System.out.println(&quot;numA=&quot; + numA); // 11
        System.out.println(&quot;numB=&quot; + numB); // 21
        System.out.println(&quot;result=&quot; + result); // 31
    }
}
</code></pre>
<h3 id="三目运算符"><a class="markdownIt-Anchor" href="#三目运算符"></a> 三目运算符</h3>
<p>三目运算符根据布尔表达式的结果进行赋值：</p>
<pre><code>value_type value_name = 布尔表达式 ? true_value : false_value;
</code></pre>
<p>利用三目运算符可以减少判断代码:</p>
<pre class="highlight"><code class="">public class Demo {
    public static void main(String[] args) {
        int numA = 10;
        int numB = 20;
        int max = 0;
        /** 使用三目运算符
         *  当numA大于numB,返回true,max = numA
         *  当numA小于numB,返回false,max = numB
         */
        max = numA&gt;numB ? numA : numB;
        // 不使用三目运算符
        // if (numA &gt; numB) {
        //    max = numA;
        //} else {
        //    max = numB;
        //}
        System.out.println(max);
    }
}
</code></pre>
<h3 id="逻辑运算符"><a class="markdownIt-Anchor" href="#逻辑运算符"></a> 逻辑运算符</h3>
<ol>
<li>逻辑运算符：与<code>&amp;，&amp;&amp;</code>、或<code>|，||</code>、非<code>!</code></li>
</ol>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        boolean flag = true;
        System.out.println(!flag); // false
    }
}
</code></pre>
<ol start="2">
<li>布尔表达式的连接，只能使用<code>与</code>和<code>或</code>操作</li>
</ol>
<blockquote>
<p><code>与</code>：所有条件都为true时，结果为true;有一个为false，结果就是false.</p>
</blockquote>
<p><strong>范例</strong>：普通与<code>&amp;</code></p>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        // 除数不能为0
        if ((1 == 2) &amp; (10 / 0 == 0)){
            System.out.println(&quot;Hello&quot;); // 报错
        }
    }
}
</code></pre>
<p><strong>结果</strong>：程序报错，因为<code>&amp;</code>会对所有条件进行判断。但就与的特点而言，前一个条件为false，结果就是false，后续的判断没有意义。<br>
<strong>范例</strong>：短路与<code>&amp;&amp;</code></p>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        // 除数不能为0
        if ((1 == 2) &amp;&amp; (10 / 0 == 0)){
            System.out.println(&quot;Hello&quot;); // false,不报错
        }
    }
}
</code></pre>
<p><strong>结果</strong>:程序不报错，因为<code>&amp;&amp;</code>只要有一个条件为false后，后续判断就不再进行，从而提高了效率。</p>
<blockquote>
<p>或操作：一个条件为true，结果为true。</p>
</blockquote>
<p><strong>范例</strong>：普通或<code>|</code></p>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        if ((1 &lt; 2 ) | (10 / 0 == 0)){
            System.out.println(&quot;Hello&quot;); // 报错
        }
    }
}
</code></pre>
<p><strong>结果</strong>：使用<code>|</code>，会对所有条件进行判断，但是或运算的特点是：一个条件为true，结果就是true。<br>
<strong>范例</strong>：短路或<code>||</code></p>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        if ((1 &lt; 2 ) || (10 / 0 == 0)){
            System.out.println(&quot;Hello&quot;); // true,不报错
        }
    }
}
</code></pre>
<blockquote>
<p>因此使用逻辑运算时就使用<code>&amp;&amp;</code>和<code>||</code>。</p>
</blockquote>
<h3 id="位运算符"><a class="markdownIt-Anchor" href="#位运算符"></a> 位运算符</h3>
<ol>
<li>数学计算为十进制。Java支持二进制、八进制和十六进制。如果要想将十进制变为二进制，采用的方式为：除2，取余，倒序。</li>
<li>位运算主要是进行二进制数据操作，位运算符：<code>&amp;</code>、<code>|</code>、<code>&gt;&gt;</code>(移位)、<code>&lt;&lt;</code>、<code>^</code>(反码)、<code>~</code>。<br>
<strong>范例</strong>：位与<code>&amp;</code></li>
</ol>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        int numA = 9;
        int numB = 11;
        System.out.println(numA &amp; numB); // 9
    }
}
</code></pre>
<p><strong>运算过程</strong>：</p>
<pre><code>  1001 → 9
&amp; 1011 → 11
  1001 →  9
</code></pre>
<p><strong>范例</strong>：位或<code>|</code></p>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        int numA = 9;
        int numB = 11;
        System.out.println(numA | numB); // 11
    }
}
</code></pre>
<p><strong>运算过程</strong>：</p>
<pre><code>  1001 → 9
| 1011 → 11
  1011 → 11
</code></pre>
<p><strong>范例</strong>：移位（最快方式计算2的3次方）</p>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        int num = 2;
        num = num &lt;&lt; 2; // 向左移位
        System.out.println(num); // 8,相当于2的3次方
    }
}
</code></pre>
<p><strong>运算过程</strong>：</p>
<pre><code>    0010 → 2
2&lt;&lt; 1000 → 8
</code></pre>
<blockquote>
<p><strong>章节小问题：请解释<code>&amp;</code>与<code>&amp;&amp;</code>的区别，以及<code>|</code>与<code>||</code>的区别:</strong><br>
1. 在逻辑运算中：<br>
  |- <code>&amp;</code>和<code>|</code>会对所有条件进行判断后，返回结果<br>
  |- <code>&amp;&amp;</code>只要一个条件返回false，就不进行后续判断，结果为false<br>
  |- <code>||</code>只要一个条件为true，就不进行后续判断，结果为true<br>
2. 在位运算中：<br>
  |- <code>&amp;</code>为位与元算，<code>|</code>为位或元算<br>
  |- <code>&amp;&amp;</code>和<code>||</code>不能用于位运算</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown语法]]></title>
      <url>/2017/09/23/Markdown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Markdown是一种轻量级的标记语言，语法简单，由一些符号组成，这些符号作用一目了然，实现易读易写的目标。Markdown兼容HTML，即你可以直接在文本中添加HTML语言，但是你不能在HTML区块标签间使用Markdown语法。</p>
</blockquote>
<h2 id="markdown语法"><a class="markdownIt-Anchor" href="#markdown语法"></a> Markdown语法</h2>
<h3 id="区块元素"><a class="markdownIt-Anchor" href="#区块元素"></a> 区块元素</h3>
<h4 id="段落与换行"><a class="markdownIt-Anchor" href="#段落与换行"></a> 段落与换行</h4>
<p>一个Markdown段落是由一个或多个连续的文本行组成的。在Markdown中是<strong>无法使用空格或制表符来缩进的</strong>，因为其默认一个空格就是一个空行。</p>
<h4 id="标题"><a class="markdownIt-Anchor" href="#标题"></a> 标题</h4>
<p>Markdown支持两种标题的语法，类Setext形式和类Atx形式，接下来介绍的类Atx形式：该形式是在行首插入1到6个<code>#</code>，对应1到6级标题。</p>
<pre><code># 这是H1
## 这是H2
...
###### 这是H6
</code></pre>
<h4 id="区块引用blockquotes"><a class="markdownIt-Anchor" href="#区块引用blockquotes"></a> 区块引用Blockquotes</h4>
<p>Markdown标记区块引用方式如下：</p>
<pre><code>&gt; 文本内容。
&gt;&gt; 文本中也可以使用嵌套引用，只要根据层次加上不同数量的&gt;
</code></pre>
<p>在引用的区域中，也可以使用其他的Markdown语法。</p>
<h4 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h4>
<p>Markdown支持有序列表和无序列表。无序列表使用<code>星号</code>、<code>减号</code>或<code>加号</code>作为列表标记:</p>
<pre><code>* red
- green
+ blue
</code></pre>
<p>有序列表则使用数字接着一个英文句号：</p>
<pre><code>1. red
2. green
3. blue
</code></pre>
<p>如果列表项目间用空行分开，在输出HTML时Markdowm就会将内容用段落标签包起来，即：</p>
<pre class="highlight"><code class="">	* blue

	*red
</code></pre>
<p>会被转换为：</p>
<pre class="highlight"><code class="bash">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;blue&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;red&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>如果要在列表项目中放入引用，就需要缩进</p>
<pre><code>* red
	&gt; this is color
</code></pre>
<p>如果要放入代码块，那就需要连续缩进两次。并且为避免行首出现数字-句号-空白，应在句号前加反斜杠。</p>
<h4 id="代码区域"><a class="markdownIt-Anchor" href="#代码区域"></a> 代码区域</h4>
<p>要在Markdown中建立代码区块很简单，只需要缩进4个空格或一个tab即可。</p>
<h4 id="分隔线"><a class="markdownIt-Anchor" href="#分隔线"></a> 分隔线</h4>
<p>你可以在一行使用三个以上的<code>星号</code>、<code>减号</code>、<code>下划线</code>来建立一个分隔线，行内不能有其他东西。你可以在星号或减号中间插入空格。</p>
<pre><code>星号：  * * *
减号：  - - -
下划线：_ _ _ 
</code></pre>
<h3 id="区段元素"><a class="markdownIt-Anchor" href="#区段元素"></a> 区段元素</h3>
<h4 id="链接"><a class="markdownIt-Anchor" href="#链接"></a> 链接</h4>
<p>Markdown支持两种形式的链接语法：行内式和参考式。建立一个行内式的链接，只要在方块括号后面紧接着圆括号插入链接即可，如果想要加上链接的title文字，只要网址后面用双引号把title文字包起来即可。</p>
<pre><code>[example](https://www.baidu.com &quot;Title&quot;)
</code></pre>
<h4 id="强调"><a class="markdownIt-Anchor" href="#强调"></a> 强调</h4>
<p>Markdown使用星号和下划线标记强调，被<code>*</code>或<code>_</code>包围的字词会被转为用<code>&lt;em&gt;</code>标签包围，而用两个<code>*</code>或<code>_</code>包起来，则变为<code>&lt;strong&gt;</code></p>
<pre><code>*强调*
_强调_
**强调**
__强调__
</code></pre>
<p>如果只想在文字前后插入普通的星号或下划线，可以使用反斜杠：</p>
<pre><code>\*文字\*
</code></pre>
<h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4>
<p>如果要标记一小段行内代码，可以使用反引号把它包起来，例如：</p>
<pre><code>`printf()`
</code></pre>
<p>如果要在代码中插入反引号，你可以用多个反引号开启或结束代码区段:</p>
<pre><code>`` (`) `` 将变为  &lt;p&gt;&lt;code&gt;(`)&lt;/code&gt;&lt;/p&gt;
</code></pre>
<h4 id="图片"><a class="markdownIt-Anchor" href="#图片"></a> 图片</h4>
<p>插入图片有两种方式：行内式和参考式</p>
<pre><code>![替代图片的文字](/path/to/img.jpg &quot;文字&quot;)
</code></pre>
<h2 id="结束"><a class="markdownIt-Anchor" href="#结束"></a> 结束</h2>
<p>感谢您的阅读，如果您有什么问题，请在下方留言，谢谢。</p>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot使用]]></title>
      <url>/2017/09/23/SpringBoot%E4%BD%BF%E7%94%A8/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> 框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Go基础知识]]></title>
      <url>/2017/09/23/Go%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Go </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java基础知识(一)]]></title>
      <url>/2017/09/23/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<h2 id="java基础知识"><a class="markdownIt-Anchor" href="#java基础知识"></a> Java基础知识</h2>
<blockquote>
<p>Java是一门<strong>面向对象</strong>语言，支持多线程编程;通过使用更为简单的<strong>引用</strong>来进行内存关系的匹配，而不是复杂的指针;Java提供<strong>垃圾自动回收机制</strong>，能更好地处理垃圾空间;可以实现多平台的移植。</p>
</blockquote>
<h3 id="第一个java程序"><a class="markdownIt-Anchor" href="#第一个java程序"></a> 第一个Java程序</h3>
<ol>
<li>运行Java程序的步骤<br>
<code>javac xx.java</code>:对Java程序进行编译，生成字节码文件<code>xx.class</code>。<br>
<code>java xx</code>：对Java程序进行解释。</li>
<li>Java程序的核心单元—<strong>类</strong><br>
类的声明方式有两种:<br>
<code>public class class_name {}</code>：该声明方式声明的java文件，文件名必须与类名一致，一个类文件中只允许使用一次该声明。<br>
<code>class class_name {}</code>：一个java文件可以多次使用该声明（不建议如此操作），但编译后会生成多个class文件。</li>
<li>第一个Java程序：Hello World</li>
</ol>
<pre class="highlight"><code class="">package com.java.demo;    		// 包名
public class HelloWorld {		// 类
	public static void main(String[] args) {    // 主方法
		System.out.println(&quot;Hello World&quot;);    // 方法体
	}
}
</code></pre>
<p>Java程序都是从<strong>主方法</strong>开始执行的.<code>System.out.println()</code>将内容输出后换行。</p>
<h3 id="classpath环境属性"><a class="markdownIt-Anchor" href="#classpath环境属性"></a> CLASSPATH环境属性</h3>
<p>PATH和CLASSPTH的<strong>区别</strong>：<code>PATH</code>是操作系统路径，定义了所有可执行程序的路径；<code>CLASSPATH</code>是Java解释类文件时的加载路径，当<code>java</code>命令运行时，JVM通过CLASSPATH属性设置的路径，加载所需要的类。<br>
配置CLASSPATH时，一定要定义一个“.”，表示在当前所在目录进行类的加载。</p>
<h3 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h3>
<p><code>// 注释内容</code>：    单行注释<br>
<code>/* 注释内容 */</code>： 多行注释<br>
<code>/** 注释内容 */</code>：文档注释</p>
<h3 id="标识符与关键字"><a class="markdownIt-Anchor" href="#标识符与关键字"></a> 标识符与关键字</h3>
<ol>
<li>标识符<br>
标识符是指Java程序中的类名、属性名、方法名等，其定义要求如下：
<blockquote>
<p>（1）标识符由字母，数字，_，$组成，不能以数字开头，不能是Java中的关键字或保留字；<br>
（2）标识符应尽量有意义，可见名知意。<br>
（3）Java标识符可以是中文，但不建议使用中文命名标识符。</p>
</blockquote>
</li>
<li>关键字<br>
Java中有两个未使用的关键字<code>goto</code>和<code>const</code>；JDK1.4之后增加了<code>assert</code>关键字；JDK1.5之后增加了<code>enum</code>关键字。</li>
</ol>
<h2 id="java数据类型"><a class="markdownIt-Anchor" href="#java数据类型"></a> Java数据类型</h2>
<ol>
<li>Java数据类型分为两大类：<code>基础数据类型</code>和<code>引用数据类型</code><br>
<strong>两者的区别在于基础数据类型不需要进行内存分配，而引用数据类型需要进行内存分配。</strong></li>
</ol>
<blockquote>
<p>基本数据类型：<br>
    |-数值型：<br>
        |-整型：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>； →默认值：<code>0</code>；<br>
        |-浮点型：<code>float</code>、<code>double</code>；        →默认值：<code>0.0</code><br>
        |-字符型：<code>char</code>；                      →默认值：<code>‘\u0000’</code><br>
        |-布尔型：<code>boolean</code>；       			 →默认值：<code>false</code><br>
    |-引用数据类型：数组、类、接口等。 		 →默认值：<code>null</code></p>
</blockquote>
<ol start="2">
<li>数据类型的选择原则</li>
</ol>
<blockquote>
<p>（1）整数用<code>int</code>，小数用<code>double</code>；<br>
（2）描述日期时间或内存大小，用<code>long</code>；<br>
（3）实现内容传递或编码转换用<code>byte</code>；<br>
（4）逻辑控制用<code>boolean</code>；<br>
（5）避免中文乱码用<code>char</code>。</p>
</blockquote>
<h3 id="整型"><a class="markdownIt-Anchor" href="#整型"></a> 整型</h3>
<ol>
<li>数字常量属于<code>int</code>型数据，如数字30。<br>
常量与变量的区别在于：常量的内容是固定的，变量的内容是可变的。范例–定义int型变量：</li>
</ol>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        // 一个变量名在同一块代码中只允许声明一次
        // 变量赋值语法：value_type value_name = value ;
        int num = 10; 
        num = num * 2;
        System.out.println(num);
    }
}
</code></pre>
<ol start="2">
<li>每个数据类型都有其对应的存储范围</li>
</ol>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        int max = Integer.MAX_VALUE;  // int型数据的最大值
        int min = Integer.MIN_VALUE;  // int型数据的最小值
        System.out.println(max);      // 2147483647
        System.out.println(max + 1);  // -2147483648
        System.out.println(min);      // -2147483648
        System.out.println(min - 1);  // 2147483647
        System.out.println(min - 2);  // 2147483646
    }
}
</code></pre>
<p>当数据超过<code>int</code>型数据的保存范围时，数值会按照循环的形式出现，即（最大值+1）变为最小值，再+1变为第二小的最小值，以此类推。这是因为数据是按照二进制进行的，第一位是符号位，而其他31位是数据位。这种现象称为<code>数据溢出</code>，解决方法是<strong>扩大数据范围</strong>：</p>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        int max = Integer.MAX_VALUE;
        int min = Integer.MIN_VALUE;
        // int变量 + long变量 = long变量,扩大了数据的范围
        System.out.println(max + 1L); // 2147483648
        System.out.println(min - (long)1); // -2147483649
        System.out.println((long)min - 2); // -2147483650
    }
}
</code></pre>
<ol start="3">
<li>数据类型的转换规律</li>
</ol>
<blockquote>
<p>范围小的数据类型与范围大的数据类型计算时，自动转换为范围大的所数据类型；<br>
范围大的数据类型只能通过强制转换变为范围小的数据类型。<br>
常量进行强制转换，可通过使用常量标记（如<code>L，l</code>可将<code>int</code>型常量变为<code>long</code>型）或使用<code>(数据类型)常量</code>。范例–强制转换：</p>
</blockquote>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        // 1000是int型，使用long型变量接收，发生自动转换
        long num = 1000;
	    // long型变为int型，强制转换
        int x = (int) num; 
        System.out.println(x); // 1000
    }
}
</code></pre>
<p>当进行强制转换的数值超出范围小的数据类型的范围时，依然会发生<strong>数据溢出</strong>。</p>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        // 2147483650L是long型数据，超出int型的范围
        long num = 2147483650L ;
        int x = (int) num; 
        System.out.println(x); // -2147483646，数据溢出
    }
}
</code></pre>
<p><code>byte</code>型数据的取值范围为<code>-128~127</code>，当整数数值在这个范围内时，会自动转型；超出<code>byte</code>范围时会发生数据溢出。<br>
4. 注意点<br>
变量声明时应设置具体数值，不使用默认值。在方法中定义的变量，其默认值是无效的。</p>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        // 未给变量赋值
		int num;  
		// 报错,未初始化变量,无法使用该变量
        System.out.println(num); 
    }
}
</code></pre>
<h3 id="浮点型"><a class="markdownIt-Anchor" href="#浮点型"></a> 浮点型</h3>
<ol>
<li>Java中浮点数属于<code>double</code>型（<code>double</code>型是保存范围最广的类型）。</li>
</ol>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        double num = 10.2; // 10.2是小数，属于double型
        // double型 * int型 = double型
        System.out.println(num * 2); // 20.4
    }
}
</code></pre>
<p>所以使用<code>float</code>数据须将<code>double强制转换为float型</code>：</p>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        float fA = 10.2F;         // 强制转型方式一
        float fB = (float) 10.2; // 强制转型方式二
        System.out.println(fA);  // 10.2
        System.out.println(fB);  // 10.2
        System.out.println(fA * fB); // 104.03999,该bug无法解决
    }
}
</code></pre>
<p>开发过程中要考虑到<code>整型数据不保留小数位</code>：</p>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        int x = 5;
        int y = 9;
        System.out.println(y / x); // 1
    }
}
</code></pre>
<p>因为<code>int型/int型=int型</code>，不保留小数位，所以要取得正确的计算结果，需要将其中一个整型变为浮点型：</p>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        int x = 5;
        int y = 9;
        System.out.println(y / (double) x); // 1.8
    }
}
</code></pre>
<h3 id="字符型"><a class="markdownIt-Anchor" href="#字符型"></a> 字符型</h3>
<ol>
<li>byte<br>
<code>byte</code>是字节，1字符=2字节。Java使用十六进制<code>UNICODE</code>编码，可以保存任意符号，并且考虑到与其他语言的结合，包含了ASCII码的部分编码，以实现无缝衔接。</li>
<li>字符使用单引号<code>'</code>声明，一对单引号只能保存一位字符。</li>
</ol>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        char c = 'A';
        int num = c; // char型可以自动转换为int型
        System.out.println(c);
        System.out.println(num); // 65,是A的ASCII码值
    }
}
</code></pre>
<ol start="3">
<li>编码：<code>'A'</code>(65)~<code>'Z'</code>(90); <code>'a'</code>（97）~<code>'z'</code>（122）; <code>'0'</code>（48）~<code>'9'</code>(57),可利用A和a的编码差为32，实现字母大小写转换：</li>
</ol>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        char c = 'A';
        int num = c;     // char型变为int型才能进行四则运算
        num = num + 32;  // 大写与小写编码值差为32
        c = (char) num;  // int型只能强制转换为char型
        System.out.println(c); // a
    }
}
</code></pre>
<ol start="4">
<li>传统编程语言字符只能保存英文标记，但UNICODE可以保存任何文字包括中文。</li>
</ol>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        char c = '游';
        int num = c;
        System.out.println(num); // 28216
    }
}
</code></pre>
<p>由于Java保存中文很方便,因此处理断句时，字符数据很有用，其他时候基本用不到。</p>
<h3 id="布尔型"><a class="markdownIt-Anchor" href="#布尔型"></a> 布尔型</h3>
<p>布尔型返回逻辑结果，只保存两种数据：<code>true</code>和<code>false</code>，主要用于逻辑控制：</p>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        boolean flag = false;
        //  if (布尔值){满足条件时的操作}
        if (!flag) {
            System.out.println(&quot;Hello World !&quot;);
        }
    }
}
</code></pre>
<h3 id="string型"><a class="markdownIt-Anchor" href="#string型"></a> String型</h3>
<ol>
<li>String型<br>
<code>String</code>属于引用数据类型（是类,Java中类名称首字母大写），表示字符串，即多个字符的集合，使用双引号<code>&quot;&quot;</code>声明。</li>
</ol>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        String str = &quot;Hello World !&quot;; // str为字符串变量
        System.out.println(str);
        // &quot;Hello World !&quot;为字符串常量
        System.out.println(&quot;Hello World !&quot;);
    }
}
</code></pre>
<ol start="2">
<li><code>+</code>可实现字符串连接</li>
</ol>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        String str = &quot;Hello&quot;;
        str = str + &quot; World !&quot;;
        System.out.println(str);
    }
}
</code></pre>
<p>当四则运算与字符串连接同时存在时：</p>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        int numA = 100;
        double numB = 99.9;
        String str = &quot;加法计算：&quot; + numA + numB;
        System.out.println(str); // 加法计算：10099.9
    }
}
</code></pre>
<p>出现上述结果是因为小范围数据会自动转型为大范围数据，即<code>String型+任意数据类型=String型</code>，然后进行字符串连接，可使用()来实现正确的运算：</p>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        int numA = 100;
        double numB = 99.9;
        String str = &quot;加法计算：&quot; + (numA + numB);
        System.out.println(str); // 加法计算：199.9
    }
}
</code></pre>
<ol start="3">
<li>Java支持转义字符，<br>
例如：换行<code>\n</code>、制表符<code>\t</code>、反斜杠<code>\\</code>、双引号<code>\&quot;</code>、单引号<code>\'</code>：</li>
</ol>
<pre class="highlight"><code class="">package com.java.demo;
public class Demo {
    public static void main(String[] args) {
        String str = &quot;Hello \&quot;World\&quot; \nHello MLDN&quot;;
        System.out.println(str);
        /**
         * Hello &quot;World&quot;
         * Hello MLDN
         */
    }
}
</code></pre>
]]></content>
      
        <categories>
            
            <category> 语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gitee+Hexo搭建个人博客]]></title>
      <url>/2017/09/22/Gitee+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><a href="https://gitee.com" target="_blank" rel="external">Gitee</a>: 由于github在国外，被墙了，于是把目光投向了国产Github，Gitee，算是支持国产吧。<br>
Hexo：一个快速、简洁高效的博客框架，使用Markdown解析文本。</p>
<h2 id="环境搭建"><a class="markdownIt-Anchor" href="#环境搭建"></a> 环境搭建</h2>
<h3 id="安装nodejs"><a class="markdownIt-Anchor" href="#安装nodejs"></a> 安装Node.js</h3>
<p>Windows用户访问<a href="https://nodejs.org/en" target="_blank" rel="external">Node.js</a>下载Node.js安装包后，直接运行安装即可(node.js下载也很慢，最好翻墙)。安装后，更换下npm的源，否则下载速度着实让人着急。</p>
<pre><code>$ npm config set registry http://registry.npm.taobao.org/
</code></pre>
<h3 id="hexo安装"><a class="markdownIt-Anchor" href="#hexo安装"></a> Hexo安装</h3>
<pre><code>$ npm install -g hexo-cli
</code></pre>
<p>Hexo的基本使用请查看hello-world文中所写。</p>
<h3 id="本地运行hexo"><a class="markdownIt-Anchor" href="#本地运行hexo"></a> 本地运行Hexo</h3>
<p>在本地选中一个空文件夹（一定要是空文件夹！！），在空文件中执行如下命令，生成Hexo运行所需要的文件：</p>
<pre><code>$ hexo init
</code></pre>
<p>初始化后，文件夹的目录如下：</p>
<pre><code>.
├── .deploy       #需要部署的文件
├── node_modules  #Hexo插件
├── public        #生成的静态网页文件
├── scaffolds     #模板
├── source        #博客正文和其他源文件等都应该放在这里
|   ├── _drafts   #草稿
|   └── _posts    #文章
├── themes        #主题
├── _config.yml   #全局配置文件
└── package.json
</code></pre>
<p>之后在本地执行如下命令后，即可访问 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 访问Hexo页面</p>
<pre><code>$ hexo s
</code></pre>
<h3 id="git安装"><a class="markdownIt-Anchor" href="#git安装"></a> Git安装</h3>
<p><a href="https://git-scm.com/downloads" target="_blank" rel="external">Git安装包地址</a>,根据操作系统选择安装包下载后安装即可。</p>
<h3 id="注册码云账号并创建一个项目"><a class="markdownIt-Anchor" href="#注册码云账号并创建一个项目"></a> 注册码云账号，并创建一个项目</h3>
<p><img src="/2017/09/22/Gitee+Hexo搭建个人博客/new project.png" alt="创建新项目"><br><br>
<img src="/2017/09/22/Gitee+Hexo搭建个人博客/new project2.png" alt="创建新项目"><br></p>
<h3 id="获取项目地址"><a class="markdownIt-Anchor" href="#获取项目地址"></a> 获取项目地址</h3>
<p><img src="/2017/09/22/Gitee+Hexo搭建个人博客/get.png" alt="获取项目地址"><br></p>
<h2 id="发布博客"><a class="markdownIt-Anchor" href="#发布博客"></a> 发布博客</h2>
<h3 id="修改hexo配置文件_configyml"><a class="markdownIt-Anchor" href="#修改hexo配置文件_configyml"></a> 修改Hexo配置文件_config.yml</h3>
<pre><code>deploy:
	type: git
	repo: 码云的项目地址
	branch: master
</code></pre>
<h3 id="部署博客"><a class="markdownIt-Anchor" href="#部署博客"></a> 部署博客</h3>
<pre><code>$ npm install hexo-deployer-git --save 
$ hexo g --d  #一键部署
</code></pre>
<p>此时会弹出一个对话框，提示输入码云的账号密码。部署成功后，登陆码云。此时本地文件夹中出现有一个public文件夹，代表部署成功。</p>
<h3 id="开启page功能"><a class="markdownIt-Anchor" href="#开启page功能"></a> 开启Page功能</h3>
<p><img src="/2017/09/22/Gitee+Hexo搭建个人博客/open.png" alt="开启Page功能"><br><br>
<img src="/2017/09/22/Gitee+Hexo搭建个人博客/start.png" alt="开启Page功能"><br><br>
<img src="/2017/09/22/Gitee+Hexo搭建个人博客/success.png" alt="博客部署成功"></p>
<h3 id="访问博客"><a class="markdownIt-Anchor" href="#访问博客"></a> 访问博客</h3>
<p>在浏览器地址栏输入上图中的博客地址，即可访问，效果图如下：<br>
<img src="/2017/09/22/Gitee+Hexo搭建个人博客/blog.png" alt="我的博客"></p>
<h2 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h2>
<p>如果搭建过程中，还有什么问题，请在下方留言。谢谢您的观赏！</p>
]]></content>
      
        <categories>
            
            <category> Hexo搭建 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/09/22/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>
<pre class="highlight"><code class="bash">$ hexo new <span class="string">"My New Post"</span>
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>
<pre class="highlight"><code class="bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>
<pre class="highlight"><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>
<pre class="highlight"><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> Hexo搭建 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[Gallery]]></title>
      <url>/gallery/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[About]]></title>
      <url>/about/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Links]]></title>
      <url>/links/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Timeline]]></title>
      <url>/timeline/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
